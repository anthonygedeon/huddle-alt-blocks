/*---------------------------------------------
VARIABLES
---------------------------------------------*/
:root {

    --primary-color:  hsl(322, 100%, 66%);

    --neutral-pale-cyan: hsl(193, 100%, 96%);
    --neutral-dark-cyan: hsl(192, 100%, 9%);
    --neutral-blue: hsl(208, 11%, 55%);

    --primary-heading-font: 'Poppins', sans-serif;;
    --heading-weight: 600;

    --secondary-body-font: 'Open Sans', sans-serif;
    --body-weight-bold: 700;
    --body-weight-regular: 400;

    --body-copy-size: 1.25rem;

    --max-width-desktop: 1440px;
    --max-width-mobile: 375px;

    --z-index-behind: -1
    --z-index-0: 0;
    --z-index-10: 10;
    --z-index-20: 20;
    --z-index-30: 30;
    --z-index-40: 40;
    --z-index-50: 50;
    --z-index-test: 99999; // will delete later
}

/// Breakpoints map
/// @prop {String} keys - Keys are identifiers mapped to a given length
/// @prop {Map} values - Values are actual breakpoints expressed in pixels
$breakpoints: (
    'small': 320px,
    'medium': 768px,
    'large': 1024px,
) !default;

/*---------------------------------------------
MIXINS
---------------------------------------------*/

/// Display flex
@mixin flex() {
    display: flex;
}

/// Space between content
@mixin space-between() {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

/// Order
@mixin order() {

}

/// Transition animations
/// @prop {String} Property - could be transform, color, etc
/// @prop {Number} Time - determine how long the animation should be
/// @prop {Function} Bezier-curve - how you want the animation to act
@mixin transition($property, $time, $bezier) {
    transition: $property $time $bezier;
}

/// Button styling
@mixin button-component() {
    color: var(--primary-white);
    padding: 1em 0;
    width: 9rem;
    border-radius: 3em;
    font-weight: var(--font-weight-bold);
    box-shadow: 0px 4px 9px 1px hsla(12, 88%, 59%, 0.65);
}

/// Check Media Queries
/// @prop {String} Size - mq-breakpoint will target the value that has the key
@mixin  check-media($mq-breakpoint, $mq-breakpoints: $breakpoints) {
    // If $mq-breakpoint is a key that exists in
    // $mq-breakpoints, get and use the value
    @if map-has-key($mq-breakpoints, $mq-breakpoint) {
        $mq-breakpoint: map-get($mq-breakpoints, $mq-breakpoint);
    } @else {
        @error "Property must be small, medium, or large";
    }
    
    @media screen and (min-width: #{$mq-breakpoint}) {
        @content;
    }
}

/*---------------------------------------------
BASIC STYLING
---------------------------------------------*/
* {
    box-sizing: border-box;
}

html, body {
    margin: 0;
    padding: 0;
}

body {
    font-family: var(--primary-font);
}

img {
    max-width: 100%;
}

h1, h2, h3, h4, h5, h6 {
    margin: 0;
}

button {
    border: none;
    background: transparent;
}

p {
    margin: 0;
}